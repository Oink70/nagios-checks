#!/bin/bash -x

# 
# NAGIOS RETURN CODES
# -------------------
#
# 0: OK
# 1: WARNING
# 2: CRITICAL
# 3: UNKNOWN
#
# NAGIOS OUTPUT FORMAT
# --------------------
# 
# "check_name check_status - check_text|check_perfdata"
#

# needed binaries
AWK=$(which awk)
BC=$(which bc)
CURL=$(which curl)
DATE=$(which date)
JQ=$(which jq)
TR=$(which tr)

# collect data
TIMESTAMP_JSON=$(${CURL} --silent 'https://bootstrap.verus.io/VRSC.json' | ${JQ} -r .bootstrap_timestamp)
TIMESTAMP_OLDEST=$(${DATE} -d '2880 minutes ago' "+%s")
TIMESTAMP_CRITICAL=$(${DATE} -d '2940 minutes ago' "+%s")
TIMESTAMP_NOW=$(${DATE} +%s)
BOOTSTRAP_AGE=$(echo ${TIMESTAMP_NOW}-${TIMESTAMP_JSON}|${BC})
BOOTSTRAP_AGE_TEXT="$(printf '%02dd:%02dh:%02dm:%02ds' $((${BOOTSTRAP_AGE}/86400)) $((${BOOTSTRAP_AGE}%86400/3600)) $((${BOOTSTRAP_AGE}%3600/60)) $((${BOOTSTRAP_AGE}%60)))"

# prepare output
CHECK_NAME="Bootstrap Age"

# determine status
# either output empty = unknown
if [ -z "${TIMESTAMP_JSON}" ] || [ -z "${TIMESTAMP_OLDEST}" ]; then
    CHECK_STATUS="UNKNOWN"
	CHECK_TEXT="Could not get required timestamps"
	CHECK_PERFDATA="bootstrap_age=U"
    CHECK_RETURN=3
# below 48h OK
elif [ "$(echo "${TIMESTAMP_JSON}>${TIMESTAMP_OLDEST}"|${BC} -l)" -eq "1" ]; then
    CHECK_STATUS="OK"
	CHECK_TEXT="Age below 48hr: ${BOOTSTRAP_AGE_TEXT}"
	CHECK_PERFDATA="bootstrap_age=${BOOTSTRAP_AGE}s"
    CHECK_RETURN=0
else
	# 5-20min over = warning
	if [ "$(echo "${TIMESTAMP_JSON}>${TIMESTAMP_CRITICAL}"|${BC} -l)" -eq "1" ]; then
		CHECK_STATUS="WARN"
		CHECK_RETURN=1
	# older than that critical
	else	
    	CHECK_STATUS="CRIT"
    	CHECK_RETURN=2
	fi
	CHECK_TEXT="Age above 49hr: ${BOOTSTRAP_AGE_TEXT}"
fi

# output
echo -n "${CHECK_NAME} ${CHECK_STATUS} - ${CHECK_TEXT}|${CHECK_PERFDATA}"
exit ${CHECK_RETURN}

# EOF
